//****************************************************************************
// Model: Uart.qm
// File:  Uart/UartOut.h
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${Uart::Uart::UartOut.h} ...................................................
#ifndef UART_OUT_H_
#define UART_OUT_H_
#include "qpcpp.h"
#include "macros.h"
#include "active_events.h"
#include "active_pipe.h"
#include "bsp.h"

using namespace QP;
using namespace StdEvents;

namespace AOs {


#if ((QP_VERSION < 580) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpcpp version 5.8.0 or higher required
#endif

//${Uart::UartOut} ...........................................................
class UartOut : public StdEvents::ASM {
public:
    Fifo * m_fifo;
    uint32_t m_writeCount;
    USART_HANDLE_TYPE_DEF * m_devUart;
    enum {STARTING_STOPPING_TIMEOUT = 200, ACTIVE_TIMEOUT = 1000};

public:
    UartOut(
        QP::QActive * owner,
        Fifo * fifo,
        USART_HANDLE_TYPE_DEF * devUart);
    static void DmaDoneCallback();

protected:
    static QP::QState initial(UartOut * const me, QP::QEvt const * const e);
    static QP::QState Root(UartOut * const me, QP::QEvt const * const e);
    static QP::QState Stopped(UartOut * const me, QP::QEvt const * const e);
    static QP::QState Started(UartOut * const me, QP::QEvt const * const e);
    static QP::QState Inactive(UartOut * const me, QP::QEvt const * const e);
    static QP::QState Active(UartOut * const me, QP::QEvt const * const e);
    static QP::QState Normal(UartOut * const me, QP::QEvt const * const e);
    static QP::QState StopWait(UartOut * const me, QP::QEvt const * const e);
    static QP::QState Failed(UartOut * const me, QP::QEvt const * const e);
};

} // namespace AOs

#endif
