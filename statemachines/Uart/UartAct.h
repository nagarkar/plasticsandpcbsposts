//****************************************************************************
// Model: Uart.qm
// File:  Uart/UartAct.h
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${Uart::Uart::UartAct.h} ...................................................
#ifndef UART_ACT_H_
#define UART_ACT_H_
#include "qpcpp.h"
#include "macros.h"
#include "active_events.h"
#include "active_pipe.h"
#include "bsp.h"
#include "UartIn.h"
#include "UartOut.h"
#include "active_log.h"

using namespace QP;
using namespace StdEvents;

namespace AOs {
    enum {
        UART_OUT_FIFO_BLOCK_SIZE = 11,
        // Gallium - set rx fifo to 8-byte for testing.
        UART_IN_FIFO_BLOCK_SIZE = 6
        //UART_IN_FIFO_ORDER = 3
    };
}

namespace AOs {


#if ((QP_VERSION < 580) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpcpp version 5.8.0 or higher required
#endif

//${Uart::UartAct} ...........................................................
class UartAct : public StdEvents::AO {
protected:
    Fifo m_outFifo;
    Fifo m_inFifo;
    USART_HANDLE_TYPE_DEF * m_devUart;
    uint8_t m_outFifoStorage[1 << UART_OUT_FIFO_BLOCK_SIZE];
    uint8_t m_inFifoStorage[1 << UART_IN_FIFO_BLOCK_SIZE];
    UartIn m_uartIn;
    UartOut m_uartOut;

public:
    enum {STARTING_STOPPING_TIMEOUT = 200};

public:
    UartAct(USART_HANDLE_TYPE_DEF * devUart);
    Fifo & GetInFifo();

protected:
    static QP::QState initial(UartAct * const me, QP::QEvt const * const e);
    static QP::QState Root(UartAct * const me, QP::QEvt const * const e);
    static QP::QState Stopped(UartAct * const me, QP::QEvt const * const e);
    static QP::QState Starting(UartAct * const me, QP::QEvt const * const e);
    static QP::QState Stopping(UartAct * const me, QP::QEvt const * const e);
    static QP::QState Started(UartAct * const me, QP::QEvt const * const e);
    static QP::QState Normal(UartAct * const me, QP::QEvt const * const e);
    static QP::QState Failed(UartAct * const me, QP::QEvt const * const e);
};

} // namespace AOs

#endif
