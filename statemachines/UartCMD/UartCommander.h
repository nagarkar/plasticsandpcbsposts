//****************************************************************************
// Model: UartCommander.qm
// File:  UartCMD/UartCommander.h
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${UartCMD::UartCommander.h} ................................................
#ifndef UART_COMMANDER_H
#define UART_COMMANDER_H

#include "active_log.h"
#include "active_pipe.h"

using namespace StdEvents;

//// CONSUMES EVENTS /////////////////////////
//    UART_COMMANDER_STOP_REQ_SIG
//    UART_COMMANDER_START_REQ_SIG
//    UART_COMMANDER_CMD_IND_SIG
//    UART_COMMANDER_SHOW_USAGE_SIG
//// PRODUCES EVENTS /////////////////////////
//    UART_COMMANDER_STOP_CFM_SIG
//    UART_COMMANDER_START_CFM_SIG
//////////////////////////////////////////////

#ifdef __cplusplus
extern "C" {
#endif

//// EXTERNAL PLUGS ////////
extern const char * UART_CMDR_GetUsage();
extern void UART_CMDR_ProcessCommand(char command);
//// EXTERNAL PLUGS END ////

#ifdef __cplusplus
}
#endif


void _UartCommanderProcessCommand(char command);

namespace AOs {


#if ((QP_VERSION < 580) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpcpp version 5.8.0 or higher required
#endif

//${UartCommander::UartCommander} ............................................
class UartCommander : public StdEvents::AO {
protected:
    Fifo * m_fifo;

public:
    UartCommander(Fifo * characterFifo);

protected:
    static QP::QState initial(UartCommander * const me, QP::QEvt const * const e);
    static QP::QState Root(UartCommander * const me, QP::QEvt const * const e);
    static QP::QState Stopped(UartCommander * const me, QP::QEvt const * const e);
    static QP::QState Started(UartCommander * const me, QP::QEvt const * const e);
};

} // namespace AOs

#endif // Header
