//****************************************************************************
// Model: WheelDrives.qm
// File:  WheelDrives/WheelDrives.h
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${WheelDrives::WheelDrives::WheelDrives.h} .................................
#include "qpcpp.h"
#include "active_log.h"
#include "active_pipe.h"
#include "active_events.h"
#include <memory>

#ifndef _WHEEL_DRIVE_H
#define _WHEEL_DRIVE_H

#define HEADING_EVT_CAST(e_)    static_cast<const WheelDrives::HeadingRequestEvt *>(e_)
#define WHEEL_MOVE_EVT_CAST(e_)    static_cast<const WheelDrives::WheelMoveRequestEvt *>(e_)
#define TWO_D_VELOCITY_GOAL(g_)        static_cast<WheelDrives::TwoDVelocityGoal *>(g_)
#define PID(x) x
#define BSP_PIN_SET(e) (1)

using namespace std;
using namespace QP;
using namespace StdEvents;

namespace WheelDrives {

    enum VelocityUnit{
        CmPerSec,        // CM per sec
        MetersPerSec     // Meters per sec
    } ;

    enum GoalType{
        ONE_D_VELOCITY,
        TWO_D_VELOCITY,
        THREE_D_VELOCITY
    };

    struct Goal {
        const GoalType type;
        Goal(GoalType type): type(type) {}
    };

    struct OneDVelocityGoal : public Goal {
        double xVelocity;
        VelocityUnit unit;
        OneDVelocityGoal() : Goal(ONE_D_VELOCITY) {}
    };

    struct TwoDVelocityGoal: public Goal {
        double xVelocity;
        double yVelocity;
        TwoDVelocityGoal() : Goal(TWO_D_VELOCITY) {}
    };

    struct ThreeDVelocityGoal : public Goal {
        double xVelocity;
        double yVelocity;
        double zVelocity;
        ThreeDVelocityGoal() : Goal(THREE_D_VELOCITY) {}
    };
}

namespace WheelDrives {


#if ((QP_VERSION < 580) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpcpp version 5.8.0 or higher required
#endif

//${WheelDrives::Wheel} ......................................................
class Wheel : public StdEvents::ASM {
public:
    uint8_t m_wheelId;

public:
    Wheel(uint8_t wheelId, QP::QActive * owner);

protected:
    static QP::QState initial(Wheel * const me, QP::QEvt const * const e);
    static QP::QState Root(Wheel * const me, QP::QEvt const * const e);
    static QP::QState Started(Wheel * const me, QP::QEvt const * const e);
    static QP::QState Failed(Wheel * const me, QP::QEvt const * const e);
    static QP::QState Running(Wheel * const me, QP::QEvt const * const e);
    static QP::QState Stopped(Wheel * const me, QP::QEvt const * const e);
};
//${WheelDrives::DiffDrive} ..................................................
class DiffDrive : public StdEvents::AO {
protected:
    enum {DIFF_DRIVE_LEFT_WHEEL, DIFF_DRIVE_RIGHT_WHEEL};

public:
    Wheel m_leftWheel;
    Wheel m_rightWheel;

public:
    DiffDrive();
    uint32_t PublishWheelVelocitiesFor(std::shared_ptr<Goal> goalPtr);
    uint32_t PublishLeftAndRightWheelVelocities(TwoDVelocityGoal & twoDGoal);

protected:
    static QP::QState initial(DiffDrive * const me, QP::QEvt const * const e);
    static QP::QState Root(DiffDrive * const me, QP::QEvt const * const e);
    static QP::QState Stopped(DiffDrive * const me, QP::QEvt const * const e);
    static QP::QState Active(DiffDrive * const me, QP::QEvt const * const e);
    static QP::QState Failed(DiffDrive * const me, QP::QEvt const * const e);
    static QP::QState Starting(DiffDrive * const me, QP::QEvt const * const e);
    static QP::QState Started(DiffDrive * const me, QP::QEvt const * const e);
};
//${WheelDrives::Bumper} .....................................................
class Bumper : public StdEvents::AO {
protected:
    uint16_t m_pin;
    enum_t m_position;

public:
    Bumper(uint16_t pin, enum_t position);

protected:
    static QP::QState initial(Bumper * const me, QP::QEvt const * const e);
    static QP::QState Root(Bumper * const me, QP::QEvt const * const e);
    static QP::QState Bumping(Bumper * const me, QP::QEvt const * const e);
    static QP::QState NotBumping(Bumper * const me, QP::QEvt const * const e);
    static QP::QState NotInitialized(Bumper * const me, QP::QEvt const * const e);
};
//${WheelDrives::FWNavSystem} ................................................
class FWNavSystem : public StdEvents::AO {
protected:
    static QP::QState initial(FWNavSystem * const me, QP::QEvt const * const e);
    static QP::QState Root(FWNavSystem * const me, QP::QEvt const * const e);
    static QP::QState Stopped(FWNavSystem * const me, QP::QEvt const * const e);
    static QP::QState Started(FWNavSystem * const me, QP::QEvt const * const e);
    static QP::QState FollowWallC(FWNavSystem * const me, QP::QEvt const * const e);
    static QP::QState FollowWallCC(FWNavSystem * const me, QP::QEvt const * const e);
    static QP::QState GTG(FWNavSystem * const me, QP::QEvt const * const e);
    static QP::QState AvoidObst(FWNavSystem * const me, QP::QEvt const * const e);
};
//${WheelDrives::BumpedEvt} ..................................................
class BumpedEvt : public StdEvents::Evt {
protected:
    enum_t m_position;

public:
    BumpedEvt(uint16_t seq, enum_t position);

protected:
    BumpedEvt(
        QSignal timeoutSignal,
        uint16_t seq,
        enum_t position);
};
//${WheelDrives::UnBumpedEvt} ................................................
class UnBumpedEvt : public WheelDrives::BumpedEvt {
public:
    UnBumpedEvt(uint16_t seq, enum_t position);
};
//${WheelDrives::HeadingRequestEvt} ..........................................
class HeadingRequestEvt : public StdEvents::Evt {
public:
    std::shared_ptr<Goal> m_goal;

public:
    HeadingRequestEvt(uint16_t seq, std::shared_ptr<Goal> goal);
};
//${WheelDrives::WheelMoveRequestEvt} ........................................
class WheelMoveRequestEvt : public StdEvents::Evt {
public:
    std::shared_ptr<OneDVelocityGoal> m_goal;

public:
    WheelMoveRequestEvt(uint16_t seq, std::shared_ptr<OneDVelocityGoal> goal);
};
//${WheelDrives::WheelTimeoutEvt} ............................................
class WheelTimeoutEvt : public StdEvents::Evt {
public:
    uint8_t m_wheelId;

public:
    WheelTimeoutEvt(uint8_t wheelId);
};

} // namespace WheelDrives

#endif // _WHEEL_DRIVE_H
