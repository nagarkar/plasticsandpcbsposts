//****************************************************************************
// Model: StdEvents.qm
// File:  stdevents/active_log.cpp
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${stdevents::active_log.cpp} ...............................................
#include <stdarg.h>
#include <stdio.h>
#include "bsp.h"
#include "qpcpp.h"
#include "active_events.h"
#include "active_pipe.h"
#include "active_log.h"
#include "app_ao_config.h"

Q_DEFINE_THIS_FILE

using namespace QP;

namespace StdEvents {

char const Log::m_truncatedError[] = "<##TRUN##>";

Fifo * Log::m_fifo = NULL;
QSignal Log::m_writeSuccessSig = 0;

void Log::AddQPInterface(Fifo *fifo, QSignal writeSuccessSig) {
    ACTIVE_LOG_ASSERT(fifo && writeSuccessSig);
    QF_CRIT_STAT_TYPE crit;
    QF_CRIT_ENTRY(crit);
    m_fifo = fifo;
    m_writeSuccessSig = writeSuccessSig;
    QF_CRIT_EXIT(crit);
}

void Log::DeleteQPInterface() {
    QF_CRIT_STAT_TYPE crit;
    QF_CRIT_ENTRY(crit);
    m_fifo = NULL;
    m_writeSuccessSig = 0;
    QF_CRIT_EXIT(crit);
}

void Log::Write(char const *buf, uint32_t len, bool useQPInterface) {
    if (m_fifo && useQPInterface) {
        bool status1 = false;
        bool status2 = false;
        if (m_fifo->IsTruncated()) {
            m_fifo->WriteNoCrit(reinterpret_cast<uint8_t const *>(m_truncatedError), CONST_STRING_LEN(m_truncatedError), &status1);
        }
        if (!m_fifo->IsTruncated()) {
            m_fifo->WriteNoCrit(reinterpret_cast<uint8_t const *>(buf), len, &status2);
        }
        // Post MUST be outside critical section.
        if (status1 || status2) {
            Q_ASSERT(m_writeSuccessSig);
            Evt *evt = new Evt(m_writeSuccessSig);
            QF::PUBLISH(evt, NULL);
        }
    } else {
        // TODO remove. Test only - write to BSP usart directly.
        BSP_XMIT_ON_DEFAULT_UART(buf, len);
    }
}

uint32_t Log::Print(char const *format, ...) {
    va_list arg;
    va_start(arg, format);
    char buf[BUF_LEN];
    uint32_t len = vsnprintf(buf, sizeof(buf), format, arg);
    va_end(arg);
    len = LESS(len, sizeof(buf) - 1);
    Write(buf, len);
    return len;
}

void Log::Event(char const *name, char const *func, QP::QEvt const *e, bool useQPInterface) {
    Q_ASSERT(name && func && e);
    char buf[BUF_LEN];
    uint32_t len = snprintf(buf, BUF_LEN, "[%lu] %s (%s): %s(%d)\n\r", BSP_GET_SYSTEM_MS, name, func, SignalArray[e->sig], e->sig);
    len = LESS(len, (BUF_LEN - 1));
    buf[len] = 0;
    Write(buf, len, useQPInterface);
}

void Log::Debug(char const *name, char const *func, char const *format, ...) {
    char buf[BUF_LEN];
    // Reserve 2 bytes for newline.
    const uint32_t MAX_LEN = sizeof(buf) - 2;
    // Note there is no space after type name.
    uint32_t len = snprintf(buf, MAX_LEN, "[%lu] %s (%s): ", BSP_GET_SYSTEM_MS, name, func);
    len = LESS(len, (MAX_LEN - 1));
    if (len < (MAX_LEN - 1)) {
        va_list arg;
        va_start(arg, format);
        len += vsnprintf(&buf[len], MAX_LEN - len, format, arg);
        va_end(arg);
        len = LESS(len, MAX_LEN - 1);
    }
    Q_ASSERT(len <= (sizeof(buf) - 3));
    buf[len++] = '\n';
    buf[len++] = '\r';
    buf[len] = 0;
    Write(buf, len);
}

} // namespace
