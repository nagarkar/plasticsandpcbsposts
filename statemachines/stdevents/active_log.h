//****************************************************************************
// Model: StdEvents.qm
// File:  stdevents/active_log.h
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${stdevents::active_log.h} .................................................
#ifndef ACTIVE_LOG_H
#define ACTIVE_LOG_H

#include "qpcpp.h"
#include "active_pipe.h"
#include "macros.h"

#define ACTIVE_LOG_ASSERT(t_) ((t_) ? (void)0 : Q_onAssert("active_log.h", (int_t)__LINE__))

namespace StdEvents {

class Log {
public:
    static void AddQPInterface(Fifo *fifo, QP::QSignal sig);
    static void DeleteQPInterface();
    static void Write(char const *buf, uint32_t len, bool useQPInterface = true);
    static uint32_t Print(char const *format, ...);
    static void ToggleEventLogging();
    static void Event(char const *name, char const *func, QP::QEvt const *e, bool useQPInterface = true);
    static void Debug(char const *name, char const *func, char const *format, ...);

private:

    enum {
        BUF_LEN = 1000,
    };
    static Fifo *m_fifo;
    static QP::QSignal m_writeSuccessSig;
    static char const m_truncatedError[];

protected:
    static bool m_eventLoggingEnabled;

};

#define PRINT(format_, ...)      Log::Print(format_, ## __VA_ARGS__)
#define DEBUG(format_, ...)      Log::Debug(me->m_name, __FUNCTION__, format_, ## __VA_ARGS__);
// The following macros can only be used within an HSM. Newline is automatically appended.
#define LOG_EVENT(e_)            Log::Event(me->m_name, __FUNCTION__, e_);
#define LOG_EVENT_NOQP(e_)       Log::Event(me->m_name, __FUNCTION__, e_, false);
#define TOGGLE_EVENT_LOGGING()   Log::ToggleEventLogging()

} // namespace

#endif // ACTIVE_LOG_H
