//****************************************************************************
// Model: BSP_STMF4XRE_HAL.qm
// File:  bsp_stmf4xre_hal/bsp.cpp
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${BSP::bsp_stmf4xre_hal::bsp.cpp} ..........................................
#include "bsp.h"
#include "usart.h"
#include "stm32f4xx_hal.h"
#include "gpio.h"
#include "stm32f4xx_hal_gpio.h"
#include "macros.h"
#include "qpcpp.h"

#ifdef __cplusplus
 extern "C" {
#endif

#define QF_CRIT_STAT_TYPE void *

/*** Private Function Prototypes **/
/**/

__weak void BSP_Init() {
   BSP_InitPerfMarker();
}

__weak void BSP_OVERRIDE_UART_CALLBACKS(USART_HANDLE_TYPE_DEF *uart) {
    (void)0;
}

__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
    (void)TickPriority;
    SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, /* Higher than DMA, UART etc */3);
    return HAL_OK;
}

__weak void BSP_InitPerfMarker() {
    DWT->CYCCNT = 0;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

static uint16_t PRINTF_BUF_LEN = 200;
__weak void BSP_Printf(char const *format, ...) {
    va_list arg;
    va_start(arg, format);
    char buf[PRINTF_BUF_LEN];
    uint32_t len = vsnprintf(buf, ARRAY_COUNT(buf), format, arg);
    va_end(arg);
    len = LESS(len, ARRAY_COUNT(buf) - 1);
    HAL_UART_Transmit(&huart2, (uint8_t *) buf, len, 0xFFFF);
}

__weak void BSP_LED_DeInit(uint16_t LED) {
    (void)LED;
}

__weak void BSP_LED_Init(uint16_t LED) {
    (void)LED;
}

__weak void BSP_LED_On(uint16_t LED) {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}

__weak void BSP_LED_Off(uint16_t LED) {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}

__weak void BSP_Delay(volatile uint32_t delay) {
    HAL_Delay(delay);
}

__weak void BSP_DisableRxInt(USART_HANDLE_TYPE_DEF *uart) {
    QF_CRIT_STAT_TYPE crit;
    QF_CRIT_ENTRY(crit);
    CLEAR_BIT(uart->Instance->CR1, USART_CR1_RXNEIE);
    QF_CRIT_EXIT(crit);
}

__weak void BSP_EnableRxInt(USART_HANDLE_TYPE_DEF *uart) {
    // Enable Data Register not empty Interrupt.
    QF_CRIT_STAT_TYPE crit;
    QF_CRIT_ENTRY(crit);
    SET_BIT(uart->Instance->CR1, USART_CR1_RXNEIE);
    QF_CRIT_EXIT(crit);
}

__weak uint32_t BSP_GetCountOfRemainingDmaXferUnits(USART_HANDLE_TYPE_DEF *uart) {
    return __HAL_DMA_GET_COUNTER(uart->hdmarx);
}

#ifdef __cplusplus
 }
#endif

