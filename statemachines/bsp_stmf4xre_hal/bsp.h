//****************************************************************************
// Model: BSP_STMF4XRE_HAL.qm
// File:  bsp_stmf4xre_hal/bsp.h
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${BSP::bsp_stmf4xre_hal::bsp.h} ............................................
#ifndef BSP_H_
#define BSP_H_

#ifdef __cplusplus
 extern "C" {
#endif

#include <stdint.h>
#include <stdarg.h>
#include <stdio.h>
#include "stm32f4xx.h"
#include "stm32f4xx_hal.h"
#include "usart.h"

#define BSP_TICKS_PER_SEC            (1000)
#define BSP_MSEC_PER_TICK            (1000 / BSP_TICKS_PER_SEC)

void BSP_Init(void);

// Cycle Counters         //
#define GetElapsedCycles(fromCycle)    (DWT->CYCCNT - (fromCycle))
void BSP_InitPerfMarker(void);
// Cycle Counters DONE    //

typedef enum {
  BSP_OK = HAL_OK,
  BSP_ERROR = HAL_ERROR,
  BSP_BUSY = HAL_BUSY,
  BSP_TIMEOUT = HAL_TIMEOUT
} BSP_STATUS;

// QF KERNEL AWARE STUFF //
enum KernelUnawareISRs { // see NOTE00
    // ...
    MAX_KERNEL_UNAWARE_CMSIS_PRI  // keep always last
};

void BSP_Printf(char const *format, ...);

void BSP_LED_DeInit(uint16_t LED);
void BSP_LED_Init(uint16_t LED);
void BSP_LED_On(uint16_t LED);
void BSP_LED_Off(uint16_t LED);

void BSP_Delay(volatile uint32_t delay);
#define BSP_GET_SYSTEM_MS (HAL_GetTick() * BSP_MSEC_PER_TICK)

#define BSP_UART_TRANSMIT_DMA(x,y,z) { \
    HAL_UART_Transmit_DMA(x, y, z); \
    BSP_OVERRIDE_UART_CALLBACKS(x); \
}
#define BSP_XMIT_ON_DEFAULT_UART(buf,len) HAL_UART_Transmit(&huart2, (uint8_t *)buf, len, 0xFFFF /* timeout */);
#define BSP_UART_RECEIVE_DMA(x,y,z) HAL_UART_Receive_DMA(x, y, z)
#define BSP_UART_DMA_STOP(x) HAL_UART_DMAStop(x)

typedef UART_HandleTypeDef USART_HANDLE_TYPE_DEF;
void BSP_OVERRIDE_UART_CALLBACKS(USART_HANDLE_TYPE_DEF *uart);
void BSP_EnableRxInt(USART_HANDLE_TYPE_DEF *uart);
void BSP_DisableRxInt(USART_HANDLE_TYPE_DEF *uart);
uint32_t BSP_GetCountOfRemainingDmaXferUnits(USART_HANDLE_TYPE_DEF *uart);

#ifdef __cplusplus
}
#endif
#endif
