//****************************************************************************
// Model: AccBumpDetector.qm
// File:  ABumpDetector/ABumpDetector.h
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//****************************************************************************
//${SigProc::ABumpDetector::ABumpDetector.h} .................................
#ifndef _ABUMP_DETECTOR_H
#define _ABUMP_DETECTOR_H

#include "qpcpp.h"
#include "bsp.h"
#include "active_events.h"
#include "active_log.h"
#include "CircularBuffer.h"
#include "stm32f4xx_hal.h"
#include "AO_IKS01A1.h"


using namespace IKS01A1;
using namespace StdDataStruct;

//// CONSUMES EVENTS /////////////////////////
//    ABUMP_DET_START_REQ_SIG
//    ABUMP_DET_STOP_REQ_SIG
//// PRODUCES EVENTS /////////////////////////
//    ABUMP_DET_START_CFM_SIG
//    ABUMP_DET_STOP_CFM_SIG
//    ABUMP_DET_FAILED_SIG
//    ABUMP_DETECTED_SIG
//////////////////////////////////////////////

namespace SigProc {


#if ((QP_VERSION < 580) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpcpp version 5.8.0 or higher required
#endif

//${SigProc::ABumpEvent} .....................................................
class ABumpEvent : public StdEvents::Evt {
public:
    double m_magnitude;
    uint32_t m_timestamp;

public:
    ABumpEvent(
        double magnitude,
        uint32_t timestamp,
        uint32_t sequence = 0)
      : Evt(ABUMP_DETECTED_SIG, sequence)
        , m_magnitude(magnitude)
        , m_timestamp(timestamp)
    {}
};

} // namespace SigProc

namespace SigProc {

//${SigProc::BumpDetector} ...................................................
class BumpDetector : public StdEvents::AO {
public:
    uint32_t m_collectionInterval;
    bool m_showBumps = true;

private:
    CircularBuffer<SensorAxesBufferElement> * m_buffer;

public:
    double m_bumpThreshold;

public:
    BumpDetector(
        uint32_t interval,
        CircularBuffer<SensorAxesBufferElement> * buffer,
        double threshold);
    void ProcessData();

protected:
    static QP::QState initial(BumpDetector * const me, QP::QEvt const * const e);
    static QP::QState Root(BumpDetector * const me, QP::QEvt const * const e);
    static QP::QState Stopped(BumpDetector * const me, QP::QEvt const * const e);
    static QP::QState Started(BumpDetector * const me, QP::QEvt const * const e);
    static QP::QState CollectingData(BumpDetector * const me, QP::QEvt const * const e);
    static QP::QState Failed(BumpDetector * const me, QP::QEvt const * const e);
};

} // namespace SigProc

#endif
